import os
import django
import time
import pyotp

# --- Setup Django Environment ---
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'servera_project.settings')
django.setup()
# --- End Django Environment Setup ---

# --- Imports that require Django to be configured ---
from django.utils import timezone
from django_otp.plugins.otp_totp.models import TOTPDevice
from API.Users.models import CustomUser

def run_mfa_test(username):
    """
    Runs a diagnostic test on the MFA OTP verification logic.
    """
    print("--- Starting MFA Diagnostic Test ---")
    
    # --- 1. Fetch the User ---
    try:
        user = CustomUser.objects.get(username=username)
        print(f"[SUCCESS] Found user: {user.username}")
    except CustomUser.DoesNotExist:
        print(f"[ERROR] User '{username}' not found. Please update the USERNAME_TO_TEST variable in this script.")
        return

    # --- 2. Get TOTP Device ---
    # Find any TOTP device for the user, confirmed or not.
    device = TOTPDevice.objects.filter(user=user).first()

    if not device:
        print(f"[ERROR] No TOTP device found for user '{username}'.")
        print("Please start the MFA setup for this user in the web application first by clicking 'Enable MFA'.")
        return

    print(f"[SUCCESS] Found TOTP device for {user.username}. Name: {device.name}, Confirmed: {device.confirmed}")
    if device.confirmed:
        print("[INFO] This device is already confirmed.")
    else:
        print("[INFO] This device is NOT yet confirmed. Testing verification flow.")
    print(f"  - Device Key (Secret): {device.key}")
    
    # --- 3. Generate a Token ---
    totp = pyotp.TOTP(device.key)
    current_otp = totp.now()
    print(f"\n--- Token Generation ---")
    print(f"Current Server Time (UTC): {timezone.now().isoformat()}")
    print(f"Generated OTP using device key: {current_otp}")

    # --- 4. Verify the Token ---
    print("\n--- Token Verification ---")
    
    is_valid_no_tolerance = device.verify_token(current_otp, tolerance=0)
    print(f"Verification result (tolerance=0): {is_valid_no_tolerance}")

    is_valid_with_tolerance = device.verify_token(current_otp, tolerance=1)
    print(f"Verification result (tolerance=1): {is_valid_with_tolerance}")

    # --- 5. Check for Time Drift ---
    print("\n--- Time Drift Analysis ---")
    for drift in range(-2, 3):
        otp_at_drift = totp.at(int(time.time()) + drift * 30)
        is_valid_at_drift = device.verify_token(otp_at_drift, tolerance=1)
        print(f"  - OTP for drift={drift} ({drift*30}s): {otp_at_drift} -> Verified: {is_valid_at_drift}")

    print("\n--- Test Finished ---")
    if not is_valid_with_tolerance:
        print("\n[CONCLUSION] The test failed. The OTP generated by the secret key could not be verified by django-otp.")
        print("This strongly suggests an issue with how the key is stored or used, or a deeper problem within the environment.")
    else:
        print("\n[CONCLUSION] The test passed. The OTP verification logic works correctly in this isolated test.")
        print("This suggests the problem might be in how the OTP token is being sent from the frontend to the backend (e.g., data format issue).")


if __name__ == "__main__":
    # !!! IMPORTANT !!!
    # Please change 'admin' to the username of the user you are testing with.
    # This user MUST have MFA enabled through the web UI before running this script.
    USERNAME_TO_TEST = 'admin' 
    run_mfa_test(USERNAME_TO_TEST)
