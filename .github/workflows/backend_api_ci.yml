name: Backend API CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready" --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run migrations
      env:
        DB_NAME: testdb
        DB_USER: testuser
        DB_PASSWORD: testpassword
        DB_HOST: localhost
        DB_PORT: 5432
      run: |
        # First create core tables
        python manage.py migrate --run-syncdb
        
        # Then run all migrations
        python manage.py migrate
        
        # Verify migrations
        python manage.py showmigrations
    
    - name: Run tests
      env:
        DB_NAME: testdb
        DB_USER: testuser
        DB_PASSWORD: testpassword
        DB_HOST: localhost
        DB_PORT: 5432

      run: |
        echo "Starting WebSocket server in the background..."
        python ServerPilot_API/Servers/ssh_terminal/ws_server.py &
        WEBSOCKET_PID=$!
        echo "WebSocket server started with PID $WEBSOCKET_PID"

        echo "Starting Celery worker in the background..."
        celery -A serverpilot_project worker -l INFO &
        CELERY_PID=$!
        echo "Celery worker started with PID $CELERY_PID"

        sleep 3 # Give servers time to start

        echo "Running tests..."
        pytest ServerPilot_API/ -v

        echo "Stopping services..."
        # Gracefully stop background processes if still running; do not fail if already exited
        if [ -n "${WEBSOCKET_PID:-}" ] && kill -0 "$WEBSOCKET_PID" 2>/dev/null; then
          kill "$WEBSOCKET_PID" || true
        else
          echo "WebSocket process $WEBSOCKET_PID not running"
        fi

        if [ -n "${CELERY_PID:-}" ] && kill -0 "$CELERY_PID" 2>/dev/null; then
          kill "$CELERY_PID" || true
        else
          echo "Celery process $CELERY_PID not running"
        fi

        # Optionally wait to ensure clean shutdown (non-fatal)
        wait "$WEBSOCKET_PID" 2>/dev/null || true
        wait "$CELERY_PID" 2>/dev/null || true
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
